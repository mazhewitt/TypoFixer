name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-release:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache target directory
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build TypoFixer
      run: cargo build --release
    
    - name: Debug - List target contents
      run: |
        echo "Contents of target/release:"
        ls -la target/release/
        echo "Looking for typo-fixer binary:"
        find target -name "typo-fixer" -type f || echo "Binary not found"
    
    - name: Create App Bundle
      run: |
        set -x # Enable verbose logging
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "🚀 Starting app bundle creation with version: $VERSION"
        echo "GITHUB_REF: $GITHUB_REF"
        echo "Extracted VERSION: $VERSION"
        SKIP_BUILD=true VERSION=$VERSION ./build.sh
        echo "📦 Build script completed with exit code: $?"
    
    - name: Debug - Check app bundle creation
      run: |
        echo "Checking if app bundle was created..."
        ls -la target/release/
        if [ -d "target/release/TypoFixer.app" ]; then
          echo "✅ App bundle exists"
          ls -la target/release/TypoFixer.app/
          ls -la target/release/TypoFixer.app/Contents/
        else
          echo "❌ App bundle NOT found"
          exit 1
        fi
    
    - name: Create DMG
      run: |
        set -x # Enable verbose logging
        VERSION=${GITHUB_REF#refs/tags/v}
        APP_NAME="TypoFixer"
        DMG_NAME="$APP_NAME-v$VERSION"
        APP_BUNDLE_PATH="target/release/$APP_NAME.app"
        STAGING_DIR="dmg-staging"

        echo "Creating DMG for version: $VERSION"
        
        if [ ! -d "$APP_BUNDLE_PATH" ]; then
          echo "❌ Error: App bundle not found at $APP_BUNDLE_PATH"
          exit 1
        fi
        
        # Create a staging directory
        rm -rf "$STAGING_DIR"
        mkdir -p "$STAGING_DIR"
        
        # Copy the app bundle to the staging directory
        cp -R "$APP_BUNDLE_PATH" "$STAGING_DIR/"
        
        # Create a symlink to the Applications folder
        ln -s /Applications "$STAGING_DIR/Applications"
        
        # Create the DMG
        hdiutil create -volname "$APP_NAME v$VERSION" -srcfolder "$STAGING_DIR" -ov -format UDZO "$DMG_NAME.dmg"
        
        # Verify DMG creation
        if [ -f "$DMG_NAME.dmg" ]; then
          echo "✅ DMG created successfully: $DMG_NAME.dmg"
        else
          echo "❌ DMG creation failed"
          exit 1
        fi

    - name: Create ZIP
      run: |
        set -x # Enable verbose logging
        VERSION=${GITHUB_REF#refs/tags/v}
        APP_NAME="TypoFixer"
        ZIP_NAME="$APP_NAME-v$VERSION"
        APP_BUNDLE_PATH="target/release/$APP_NAME.app"
        
        echo "Creating ZIP for version: $VERSION"
        
        if [ ! -d "$APP_BUNDLE_PATH" ]; then
          echo "❌ Error: App bundle not found at $APP_BUNDLE_PATH"
          exit 1
        fi
        
        # Create the ZIP archive
        ditto -c -k --sequesterRsrc --keepParent "$APP_BUNDLE_PATH" "$ZIP_NAME.zip"
        
        # Verify ZIP creation
        if [ -f "$ZIP_NAME.zip" ]; then
          echo "✅ ZIP created successfully: $ZIP_NAME.zip"
        else
          echo "❌ ZIP creation failed"
          exit 1
        fi
    
    - name: Create Release Notes
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        cat > RELEASE_NOTES.md << EOF
        # TypoFixer v$VERSION
        
        ## Features
        - Global hotkey (Cmd+Option+S) for instant text correction
        - LLM-powered spell and grammar checking via Ollama
        - Robust fallback methods for compatibility with all macOS applications
        - Menu bar integration for easy access
        - Smart text extraction and correction
        
        ## Installation
        1. Download the DMG or ZIP file
        2. Move TypoFixer.app to Applications
        3. Grant accessibility permissions when prompted
        4. Install and run Ollama with a language model
        
        ## Requirements
        - macOS 10.15+
        - Ollama with language model (recommended: llama3.2:1b)
        - Accessibility permissions
        
        Built on $(date +"%Y-%m-%d")
        EOF
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          TypoFixer-v*.dmg
          TypoFixer-v*.zip
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
